@page "/"
@using Nayvid.Gemini.Video
@using Nayvid.Gemini.Video.Models
@using Nayvid.Gemini.Image
@inject IGeminiVideoClient VideoClient
@inject IImageClient ImageClient
@inject ISpeechClient SpeechClient

<h3>Gemini Demo</h3>

<input @bind="videoText" placeholder="Video prompt" />
<button @onclick="GenerateVideo">Generate Video Op</button>
<p>@videoStatus</p>

<input @bind="imageText" placeholder="Image prompt" />
<button @onclick="GenerateImage">Generate Image Op</button>
<p>@imageStatus</p>

<h4>Speech</h4>
<input @bind="speechText" placeholder="Speech text" />
<button @onclick="GenerateSpeech">Generate Speech</button>
<p>@speechStatus</p>
@if (speechData != null)
{
    <audio controls src="@speechDataUrl"></audio>
}

@code {
    string videoText = "Describe this video";
    string videoStatus = string.Empty;
    string imageText = "A sunset over mountains";
    string imageStatus = string.Empty;
    string speechText = "Hello from Blazor";
    string speechStatus = string.Empty;
    byte[]? speechData;
    string? speechDataUrl;

    async Task GenerateVideo()
    {
        var start = await VideoClient.StartResumableUploadAsync(new StartUploadRequest("placeholder.mp4","video/mp4",0));
        var media = await VideoClient.CompleteUploadAsync(start);
        var op = await VideoClient.GenerateFromVideoAsync(new GenerateFromVideoRequest("gemini-pro-video", new[] { new VideoPart(media.MediaId) }, videoText));
        videoStatus = $"Video Operation: {op.Name} Status: {op.Status}";
    }

    async Task GenerateImage()
    {
        var op = await ImageClient.GenerateImageAsync("image-model", imageText);
        imageStatus = $"Image Operation: {op.Name} Status: {op.Status}";
    }

    async Task GenerateSpeech()
    {
        speechData = await SpeechClient.TextToSpeechAsync("speech-model", speechText);
        speechStatus = $"Speech bytes: {speechData.Length}";
        // Convert to base64 data URL
        speechDataUrl = $"data:audio/wav;base64,{Convert.ToBase64String(speechData)}";
    }
}
